@page "/Condition"
@using Sklad.Components.Services
@using System.Threading
@inject ToolService ToolService
@inject NavigationManager NavigationManager
@using MudBlazor
@using MudBlazor.Services
@using Sklad.Components.Models

<MudGrid RowSpacing="2" ColumnSpacing="2" Justify="Justify.SpaceBetween">
    <MudItem>
        <MudText Typo="Typo.h5">Warehouse Conditions</MudText>
    </MudItem>
    <MudItem>
       
    </MudItem>
</MudGrid>

<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="_table">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="location_field" T="string">Conditions</MudTableSortLabel>
        </MudTh>
        <MudTh Style="text-align: right;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Condition">@context.Name</MudTd> <!-- context to string (lokalizacja) -->
        <MudTd Style="text-align: right;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                       OnClick="() => DeleteCondition(context.Name)"
                       StartIcon="@Icons.Material.Filled.Delete">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No condition found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <FooterContent>
        <MudTd ColSpan="2">
            <MudTextField @bind-Value="_newCondition" Placeholder="Enter new condition" Variant="Variant.Outlined" />
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Add"
                       Color="Color.Primary" 
                       Size="Size.Small" 
                       OnClick="() => AddCondition(_newCondition)">
                Add
            </MudButton>
        </MudTd>
    </FooterContent>
</MudTable>



@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    
    private IEnumerable<string> _pagedData;
    private MudTable<Condition> _table;
    
    private readonly string _searchString = string.Empty;
    private string _newCondition = string.Empty;
    
    private async Task<TableData<Condition>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<Condition?> data = await ToolService.GetConditionsAsync();
        
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            data = data.Where(condition =>
                condition?.Name != null &&
                condition.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
        }
        
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            data = state.SortDirection == SortDirection.Ascending
                ? data.OrderBy(condition => condition?.Name)
                : data.OrderByDescending(condition => condition?.Name);
        }
        
        var dataArray = data as Condition[] ?? data.ToArray();
        var pagedData = dataArray
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToArray();
        
        return new TableData<Condition>
        {
            TotalItems = dataArray.Length,
            Items = pagedData!
        };
    }

    private async void AddCondition(string condition)
    {
        try
        {
            await ToolService.AddConditionAsync(condition);
            Snackbar?.Add($"Condition '{condition}' added successfully.", Severity.Success);
            await _table.ReloadServerData();
            _newCondition = string.Empty;
        }
        catch (Exception ex)
        {
            Snackbar?.Add($"Error adding location: {ex.Message}", Severity.Error);
        }
    }

    private async void DeleteCondition(string condition)
    {
        try
        {
            await ToolService.DeleteConditionAsync(condition);
            Snackbar?.Add($"Condition '{condition}' deleted successfully.", Severity.Success);
            await _table.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar?.Add($"Error deleting location: {ex.Message}", Severity.Error);
        }
    }
}