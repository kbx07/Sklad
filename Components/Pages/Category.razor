@page "/Category"

@using Sklad.Components.Services
@using System.Threading
@inject ToolService ToolService
@inject NavigationManager NavigationManager
@using MudBlazor
@using MudBlazor.Services

<MudGrid RowSpacing="2" ColumnSpacing="2" Justify="Justify.SpaceBetween">
    <MudItem>
        <MudText Typo="Typo.h5">Warehouse Category</MudText>
    </MudItem>
    <MudItem>
       
    </MudItem>
</MudGrid>

<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="_table">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="location_field" T="string">Category</MudTableSortLabel>
        </MudTh>
        <MudTh Style="text-align: right;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Category">@context</MudTd> <!-- context to string (lokalizacja) -->
        <MudTd Style="text-align: right;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                       OnClick="() => DeleteCategory(context)">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No locations found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <FooterContent>
        <MudTd ColSpan="2">
            <MudTextField @bind-Value="_newCategory" Placeholder="Enter new location" Variant="Variant.Outlined" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => AddCategory(_newCategory)">
                Add
            </MudButton>
        </MudTd>
    </FooterContent>
</MudTable>



@code {
    private IEnumerable<string> _pagedData;
    private MudTable<string> _table;
    private int _totalItems;
    private string _searchString = string.Empty;
    private string _newCategory = string.Empty;

    [Inject] ISnackbar Snackbar { get; set; }

    private async Task<TableData<string>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<string> data = await ToolService.GetCategoriesAsync();

        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            data = data.Where(category =>
                category.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            data = state.SortDirection == SortDirection.Ascending
                ? data.OrderBy(category => category)
                : data.OrderByDescending(category => category);
        }

        var pagedData = data
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToArray();

        return new TableData<string>
        {
            TotalItems = data.Count(),
            Items = pagedData
        };
    }

    private async void AddCategory(string category)
    {
        try
        {
            await ToolService.AddCategoryAsync(category);
            Snackbar.Add($"Category '{category}' added successfully.", Severity.Success);
            _table.ReloadServerData();
            _newCategory = string.Empty;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding location: {ex.Message}", Severity.Error);
        }
    }

    private async void DeleteCategory(string category)
    {
        try
        {
            await ToolService.DeleteCategoryAsync(category);
            Snackbar.Add($"Category '{category}' deleted successfully.", Severity.Success);
            _table.ReloadServerData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting location: {ex.Message}", Severity.Error);
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }
}